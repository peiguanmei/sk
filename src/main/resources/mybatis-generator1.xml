<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!--suppress MybatisGenerateCustomPluginInspection -->
<generatorConfiguration>
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <property name="javaFileEncoding" value="UTF-8"/>
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!--caseSensitive 是否区分大小写，默认值 false。如果数据库区分大小写，这里就需要配置为 true，这样当表名为 USER 时，会生成 @Table(name = "USER") 注解，否则使用小写 user 时会找不到表。-->
        <!--forceAnnotation 是否强制生成注解，默认 false，如果设置为 true，不管数据库名和字段名是否一致，都会生成注解（包含 @Table 和 @Column）。-->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <property name="caseSensitive" value="true"/>
            <property name="forceAnnotation" value="true"/>
        </plugin>

        <!--通用代码生成器插件-->
        <!--mapper接口-->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="src/main/java"/>
            <property name="targetPackage" value="com.p.dao"/>
            <property name="templatePath" value="generator/mapper.ftl"/>
            <property name="mapperSuffix" value="Dao"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.java"/>
        </plugin>
        <!--mapper.xml-->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="src/main/resources"/>
            <property name="targetPackage" value="mappers"/>
            <property name="mapperPackage" value="com.p.dao"/>
            <property name="templatePath" value="generator/mapperXml.ftl"/>
            <property name="mapperSuffix" value="Dao"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.xml"/>
        </plugin>

        <!--测试输出单个文件，每个表都会生成一个对应的文件-->
        <!--<plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">-->
            <!--<property name="targetProject" value="src/test/java"/>-->
            <!--<property name="targetPackage" value="test.one"/>-->
            <!--<property name="templatePath" value="generator/test-one.ftl"/>-->
            <!--<property name="fileName" value="${tableClass.shortClassName}Test.txt"/>-->
            <!--<property name="templateFormatter"-->
                      <!--value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>-->
        <!--</plugin>-->
        <!--测试输出整个文件，所有表都可用，一次只生成一个文件，用于聚合所有表使用-->
        <!--<plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">-->
            <!--<property name="singleMode" value="false"/>-->
            <!--<property name="targetProject" value="src/test/java"/>-->
            <!--<property name="targetPackage" value="test.all"/>-->
            <!--<property name="templatePath" value="generator/test-all.ftl"/>-->
            <!--<property name="fileName" value="All.txt"/>-->
        <!--</plugin>-->

        <jdbcConnection userId="root" password="p" driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/seckill"/>

        <!--MyBatis 生成器只需要生成 Model-->
        <javaModelGenerator targetPackage="com.p.entity" targetProject="src/main/java"/>

        <!-- oracle自增使用下面的配置 SQL 中的 {1} 代表的是对应表的大写形式，{0} 是小写形式-->
        <!--<table tableName="country">-->
        <!--<generatedKey column="id"-->
        <!--sqlStatement="select SEQ_{1}.nextval from dual"-->
        <!--identity="false" type="pre"/>-->
        <!--</table>-->
        <!-- 生成实体类注解形式如下 -->
        <!--@Id-->
        <!--@GeneratedValue(strategy = GenerationType.IDENTITY, generator = "select SEQ_COUNTRY.nextval from dual")-->
        <!--private Integer id;-->

        <!-- mysql自增使用下面2种 -->
        <!--<table tableName="%">-->
        <!--<generatedKey column="id" sqlStatement="Mysql"/>-->
        <!--</table>-->
        <!-- 生成实体类注解形式如下 -->
        <!--@Id
        @Column(name = "id")
        @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "SELECT LAST_INSERT_ID()")-->

        <table tableName="%">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <!-- 生成实体类注解形式如下 -->
        <!--@Id
        @Column(name = "Id")
        @GeneratedValue(generator = "JDBC")
        private Integer id;-->
    </context>
</generatorConfiguration>
